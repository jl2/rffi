* About
This is a package to call Rust library crates from Common Lisp.

Right now it's in a very early stage, and has no working code.

I'm currently flushing out the API design, researching Rust and its implementation, and
studying the CFFI to understand how this may work.


* Why?

If Rust is going to replace C++ and C, it must be possible to use Rust from 3rd party languages,
like Common Lisp and Python.  My goal is to avoid using C or C++ as an intermediate language, and
I think Common Lisp has enough flexibility to make working with Rust
seamless.

* License
ISC

Copyright (c) 2024 Jeremiah LaRocco <jeremiah_larocco@fastmail.com>

* Design Ideas

The long term goal is to make using Rust from CL as transparent as possible.

** MVP
#+begin_src lisp
  (ql:quickload '(:rffi))

  ;; Load the crate
  (rffi:use "simple-lib")

  ;; Call a function and get a result.
  (format t "~a~%" (simple-lib:fibonacci 10))
#+end_src

** More Complex Examples
Eventually more advanced crates like rstar::RTree should also work.

https://docs.rs/rstar/latest/rstar/struct.RTree.html

Note the integration with iterate.

#+begin_src lisp
  (ql:quickload '(:rffi :iterate))
  (use-package :iterate)

  (rffi:use "rstar::RTree")

  ;; Create an RTree
  (let ((tree (rtree:rtree-new)))

    ;; Insert
    (rtree:insert tree '(0.1f0 0.0f0))
    (rtree:insert tree '(0.2f0 0.1f0))
    (rtree:insert tree '(0.3f0 0.1f0))
    (assert (equal (rtree:nearest-neighbor tree '(0.4f0 -0.1f0)) '(0.3f0 0.0f0)))

    ;; Remove
    (rtree:remove tree '(0.4f0 0.0f0))
    (assert (equal (rtree:nearest-neighbor tree '(0.4f0 0.3f0)) '(0.2f0 0.1f0)))
    (assert (= (rtree:size tree) 2))

    ;; Iterate support for Rust iterators
    (iterate
      (for elt :in tree)
      (format t "~a~%" elt)))

#+end_src

** Common Lisp -> Rust -> C
A Rust crate that use CFFI bindings to a C library.

How would this compare to a Common Lisp -> C binding with autowrap?

How about a CFFI binding created by hand?

If CL -> Rust can be done without overhead, CL -> Rust -> C seems better than CL -> C with autowrap, at least for RE2.

** RE2
https://docs.rs/re2/latest/re2/

#+begin_src lisp
  (ql:quickload '(:rffi :iterate))
  (use-package :iterate)

  (rffi:use "re2::RE2")
  (let* ((r (RE2:parse "a(.+)f"))
         (m (RE2:full-match-capturing "asdf")))
    (assert (string= m "sd")))
#+end_src

** tokio
Can this work?
https://tokio.rs/tokio/tutorial/hello-tokio

#+begin_src lisp
  (ql:quickload '(:rffi :iterate))
  (use-package :iterate)

  (rffi:use "tokio")
  (rffi:use "mini_redis")
  (tokio:defmain ()
      (let ((client (tokio:await? (mini-redis:connect "127.0.0.1:6379"))))
        (tokio:await? (mini-redis:set client "hello" (mini-redis:into "world")))
        (let ((result (tokio:await? (mini-redis:get client "hello"))))
          (format t "got value from server; result: ~a~%" result)
          (assert (string= result "world")))))
#+end_src


** stdlib
The stdlib should also be usable, but AFAICT, it's not a crate.


In any case, if it behaved like a crate for the sake of the binding, that would be great.

In that case, HashMap might look something like this
https://doc.rust-lang.org/std/collections/struct.HashMap.html

#+begin_src lisp
  (ql:quickload '(:rffi :iterate))
  (use-package :iterate)

  (rffi:use "std::collections::HashMap")

  ;; Create a hashmap
  (let ((book-reviews (hash-map:new)))

    ;; Insert
    (hash-map:insert book-reviews "Adventures of Huck Finn" "My favorite!")
    (hash-map:insert book-reviews "The C++ Programming language" "Bjarne!")
    (hash-map:insert book-reviews "Lisp" "Henry Winston")

    ;; Query
    (when (not (hash-map:contains-key book-reviews "Let Over Lambda"))
      (format t "Did not find LOL in reviews.~%"))

    ;; Remove
    (hash-map:remove book-reviews "Adventures of Huck Finn")

    ;; Fetch
    (loop :for book :in '("Pride and Prejudice", "Lisp")
          ;; None -> nil
          :for review = (hash-map:get book-reivews book)
          :when review
                (format t "Review for ~a is: ~s~%" book review))

    ;; Iterate
    (iterate
      (for (book . review) :in book-reviews
           (format "~s : ~s~%" book review)))) 
#+end_src


* Resources
| Description                             | URL                                                                                                     | Notes                                                                               |
| ABI Info                                | https://www.youtube.com/watch?v=MY5kYqWeV1Q                                                             |                                                                                     |
| A crate implementing a stable ABI       | https://docs.rs/abi_stable/latest/abi_stable/                                                           |                                                                                     |
| Another crate for a stable ABI          | https://github.com/ZettaScaleLabs/stabby                                                                |                                                                                     |
| RFFI must support APIs following these  | https://rust-lang.github.io/api-guidelines/about.html                                                   |                                                                                     |
| Info about collections                  | https://github.com/rust-lang/rust/blob/master/library/std/src/collections/mod.rs                        |                                                                                     |
| Minimizing size                         | https://github.com/johnthagen/min-sized-rust#optimize-libstd-with-build-std                             |                                                                                     |
| Rust + libc (why not vDSO or syscall ?) | https://users.rust-lang.org/t/clarifications-on-rusts-relationship-to-libc/56767                        |                                                                                     |
| Just interesting                        | https://stackoverflow.com/questions/12806584/what-is-better-int-0x80-or-syscall-in-32-bit-code-on-linux |                                                                                     |
| Just interesting                        | https://github.com/rust-lang/compiler-builtins                                                          |                                                                                     |
| Rust "Core" library details             | https://doc.rust-lang.org/core/                                                                         |                                                                                     |
| Rust in Linux                           | https://github.com/torvalds/linux/tree/master/rust                                                      | Interesting to read some of the comments here and see the approach taken on things. |
| Rust in Linux                           | [[~/oss_src/linux/rust/]]                                                                                   |                                                                                     |
|                                         |                                                                                                         |                                                                                     |



* Things To Research

** Rust in Linux

The Rust kernel source
[[~/oss_src/linux/rust/]]

Rust code in the kernel:
#+begin_src elisp
(find-dired "~/oss_src/linux/" "-name \"*.rs\"")
#+end_src

#+RESULTS:
| :%s |


It looks like the kernel uses the Rust `bindgen` tool to create bindings to certain kernel functions and data types, making them callable with Rust.

*** TODO: See what bindgen creates.  Can it be used to pass Lisp data into Rust (possibly through CFFI?)?

Makefile has some interesting comments regarding stdlib, boot strapping low level stuff, Rust tool expectations, etc.





** Rust calling convention

** Basic Data Type Conversion
| f32    | single-float                 |
| f64    | double-float                 |
| i64    | fixnum or (signed-byte 64)   |
| u64    | integer or (usigned-byte 64) |
| i32    | fixnum or (signed-byte 32)   |
| u32    | fixnum or (signed-byte 32)   |
| string | string                       |
| array  | array (or list?)             |

*** How about the stdlib?
These conversions should be possible and easy to do, but I don't think it makes sense to do them automatically.

| Vec     | array     |
| hashmap | hashtable |

** Rust Metadata

*** How to programmatically inspect crates
   #+begin_src shell
     cargo metadata [<crate name>]
   #+end_src

*** How to find public API of a crate?
   Read .rlib file somehow? 

   
** Rust generics
*** How do they work?
Are they like C++ templates - effectively compile-time code generation?


*** Can they work with Common Lisp objects?
Can there be a Rust wrapper around CL objects?

** Callbacks
Is it possible to pass Lisp functions into Rust?
Is it possible to pass Rust functions into Lisp?


** TODO: 
